# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
      - release

resources:
  - repo: self

variables:
  - group: pmis-corefrontend-training

# Agent VM image name
pool:
  vmImage: 'ubuntu-latest'

stages:
  # BuildAndPush stage (Docker)
  - stage: BuildAndPush
    displayName: BuildAndPush
    jobs:
      - job: BuildAndPush
        displayName: BuildAndPush
        steps:
          - task: Docker@2
            displayName: 'Building and pushing Docker image....'
            inputs:
              command: buildAndPush
              repository: $(IMAGE_REPOSITORY)
              tags: $(TAG)
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              containerRegistry: 'AlexDockerHubSvcConnection'
              arguments: '--build-arg NEXT_PUBLIC_API_BASE_URL=$(BASE_API_URL)'

  # Trivy scan stage (Trivy)
  - stage: TrivyScan
    displayName: Trivy Scan
    dependsOn: BuildAndPush
    jobs:
      - job: TrivyScanJob
        displayName: Trivy Scan
        steps:
          - task: Bash@3
            displayName: 'Run Trivy Scan'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update && sudo apt-get install -y trivy
                trivy image --exit-code 1 --severity HIGH,CRITICAL $(containerRegistry)/$(IMAGE_REPOSITORY):$(TAG) || true

  # Deploy to Training Environment
  - stage: DeployToTNTTraining
    displayName: 'Deploy to TNT Training'
    jobs:
      - job: DeploytoTNTTest
        displayName: 'Deploy to TNT Training'
        pool:
          name: 'tnt-selfhosted-trainingpool' # Ensure the pipeline uses the self-hosted agent pool
        steps:
          # Step 1: SSH into On-Prem Server and Deploy using Docker compose
          - task: SSH@0
            displayName: 'Deploy Docker-Compose on tnt test'
            inputs:
              sshEndpoint: 'tntfrontend-trainingsvc' # Your SSH service connection
              runOptions: 'commands' # 'script'
              commands: |
                echo "Starting script..."
                /home/agiledevops/configs/start_core_app.sh
              interactiveSession: true
              readyTimeout: '50000'
________________________________________________________


trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: DownloadSecureFile@1
    name: sshKey
    inputs:
      secureFile: 'sammymathenge-web.pem'

  - script: |
      # Set correct permissions for the private key
      chmod 600 $(Agent.TempDirectory)/sammymathenge-web.pem

      # Start SSH agent
      eval $(ssh-agent -s)

      # Add SSH private key to the agent
      ssh-add $(Agent.TempDirectory)/sammymathenge-web.pem

      # SSH into the server
      ssh -o StrictHostKeyChecking=no -p $(SSH_PORT) $(SSH_USERNAME)@$(SSH_HOST) << 'EOF'
        echo "SSH connection successful"

        # Navigate to the project directory
        cd pmis

        # Clean up unused Docker images
        sudo docker image prune -af

        # Pull the latest code from the repository
        git reset --hard origin/main
        git pull

        # Build the Docker image with no cache
        sudo docker build --build-arg NEXT_PUBLIC_API_BASE_URL=http://192.168.3.68:9090/ -t agilesam/pmis:latest .

        # sudo docker build --build-arg NEXT_PUBLIC_API_BASE_URL=https://tntapi.agilebiz.co.ke/ -t pmis .

        # Log in to Docker Hub
        echo "$DOCKER_HUB_PASSWORD" | sudo docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

        # Push the Docker image to Docker Hub
        sudo docker push agilesam/pmis:latest

        # Stop and remove the existing container if it exists
        sudo docker stop pmis-core || true
        sudo docker rm pmis-core || true

        # Run the new Docker container
        sudo docker run --name pmis-core -p 4000:3000 -d pmis

        # Clean up Docker images and builder
        sudo docker image prune -af
        sudo docker builder prune -f

        # Restart Nginx to apply any changes
        sudo systemctl restart nginx

        echo "Deployment completed successfully"
      EOF
    displayName: 'Deploying to server...'
